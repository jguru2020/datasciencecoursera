pollutantsmean = function (directory, pollutantName, ids = 1:332)
{
datafiles = list.files(path = "/R-Programming/Week-2/specdata/", pattern = ".csv", full.names = TRUE)
datafiles
}
pollutantsmean("specdata", "nitrate")
pollutantsmean = function (directory, pollutantName, ids = 1:332)
{
x = getwd()
x
datafiles = list.files(path = "/R-Programming/Week-2/specdata/", pattern = ".csv", full.names = TRUE)
datafiles
}
pollutantsmean("specdata", "nitrate")
getwd()
pollutantsmean = function (directory, pollutantName, ids = 1:332)
{
datafiles = list.files(path = "specdata", pattern = ".csv", full.names = TRUE)
datafiles
}
pollutantsmean("specdata", "nitrate")
pollutantsmean = function (directory, pollutantName, ids = 1:332)
{
datafiles = list.files(path = "specdata", pattern = ".csv", full.names = TRUE)
for(datafile in datafiles)
{
print datafile + "/n"
}
}
pollutantsmean = function (directory, pollutantName, ids = 1:332)
{
datafiles = list.files(path = "specdata", pattern = ".csv", full.names = TRUE)
for(datafile in datafiles)
{
print (datafile + "/n")
}
}
pollutantsmean("specdata", "nitrate")
pollutantsmean = function (directory, pollutantName, ids = 1:332)
{
datafiles = list.files(path = "specdata", pattern = ".csv", full.names = TRUE)
for(datafile in datafiles)
{
print (datafile)
}
}
pollutantsmean("specdata", "nitrate")
pollutantsmean = function (directory, pollutantName, ids = 1:332)
{
datafiles = list.files(path = "specdata", pattern = ".csv", full.names = TRUE)
for(datafile in datafiles)
{
print (datafile)
read.csv(datafile)
break
}
}
pollutantsmean("specdata", "nitrate")
pollutantsmean = function (directory, pollutantName, ids = 1:332)
{
datafiles = list.files(path = "specdata", pattern = ".csv", full.names = TRUE)
for(datafile in datafiles)
{
print (datafile)
csvData = read.csv(datafile)
csvData
break
}
}
pollutantsmean("specdata", "nitrate")
pollutantsmean = function (directory, pollutantName, ids = 1:332)
{
datafiles = list.files(path = directory, pattern = ".csv", full.names = TRUE)
columnValues = numeric()
for (i in ids)
{
csvData 	= read.csv(datafiles[i])
columnValues 	= c(columnValues,csvData[[pollutant]])
}
mean(columnValues, na.rm = TRUE)
}
pollutantsmean("specdata", "nitrate")
pollutantsmean = function (directory, pollutantName, ids = 1:332)
{
datafiles = list.files(path = directory, pattern = ".csv", full.names = TRUE)
columnValues = numeric()
for (i in ids)
{
csvData 	= read.csv(datafiles[i])
columnValues 	= c(columnValues,csvData[[pollutantName]])
}
mean(columnValues, na.rm = TRUE)
}
pollutantsmean("specdata", "nitrate")
pollutantsmean("specdata", "sulfate")
source("pollutantmean.R")
getwd()
source("pollutantmean.R")
source("PollutantsMean.R")
pollutantsmean("specdata", "sulfate", 1:10)
pollutantsmean = function (directory, pollutantName, ids = 1:332)
{
datafiles = list.files(path = directory, pattern = ".csv", full.names = TRUE)
columnValues = numeric()
for (i in ids)
{
csvData 	= read.csv(datafiles[i])
columnValues 	= c(columnValues,csvData[[pollutantName]])
}
mean(columnValues, na.rm = TRUE)
}
source("PollutantsMean.R")
pollutantsmean("specdata", "sulfate", 1:10)
pollutantsmean("specdata", "nitrate", 70:72)
pollutantsmean("specdata", "nitrate", 23)
getwd()
data = read.csv("001.csv")
data = read.csv("specdata/001.csv")
data
data = read.csv("specdata/001.csv",100)
data
complete.cases(data)
complete = function(directory, id = 1:332)
{
datafiles = list.files(path = directory, pattern = ".csv", full.names = TRUE)
nobs = numeric()
for (i in id)
{
data = read.csv(datafiles[i])
nobs = c(nobs,sum(complete.cases(data)))
}
data.frame(id,nobs)
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
Correlation = function(directory, threshold = 0)
{
cor_results = numeric()
complete_cases = complete(directory)
complete_cases = complete_cases[complete_cases$nobs=threshold, ]
}
Correlation = function(directory, threshold = 0)
{
cor_results = numeric()
complete_cases = complete(directory)
complete_cases = complete_cases[complete_cases$nobs >= threshold, ]
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr = Correlation("specdata", 150)
head(cr)
source("Correlation.R")
source("complete.R")
cr = Correlation("specdata", 150)
head(cr)
Correlation = function(directory, threshold = 0)
{
cor_results = numeric()
complete_cases = complete(directory)
complete_cases = complete_cases[complete_cases$nobs >= threshold, ]
complete_cases
if(nrow(complete_cases)>0){
for(monitor in complete_cases$id){
path <- paste(getwd(), "/", directory, "/", sprintf("%03d", monitor), ".csv", sep = "")
#print(path)
monitor_data <- read.csv(path)
#print(monitor_data)
interested_data <- monitor_data[(!is.na(monitor_data$sulfate)), ]
interested_data <- interested_data[(!is.na(interested_data$nitrate)), ]
sulfate_data <- interested_data["sulfate"]
nitrate_data <- interested_data["nitrate"]
cor_results <- c(cor_results, cor(sulfate_data, nitrate_data))
}
}
cor_results
}
source("Correlation.R")
source("complete.R")
cr = Correlation("specdata", 150)
head(cr)
summary(cr)
pollutantmean("specdata", "sulfate", 1:10)
pollutantsmean = function (directory, pollutantName, ids = 1:332)
{
datafiles = list.files(path = directory, pattern = ".csv", full.names = TRUE)
columnValues = numeric()
for (i in ids)
{
csvData 	= read.csv(datafiles[i])
columnValues 	= c(columnValues,csvData[[pollutantName]])
}
mean(columnValues, na.rm = TRUE)
}
pollutantsmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantsmean("specdata", "sulfate", 34)
pollutantsmean("specdata", "nitrate")
complete = function(directory, id = 1:332)
{
datafiles = list.files(path = directory, pattern = ".csv", full.names = TRUE)
nobs = numeric()
for (i in id)
{
data = read.csv(datafiles[i])
nobs = c(nobs,sum(complete.cases(data)))
}
data.frame(id,nobs)
}
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
RNGversion("3.5.1")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
RNGversion("3.5.1")
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- Correlation("specdata")
cr <- sort(cr)
RNGversion("3.5.1")
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- Correlation("specdata", 129)
cr <- sort(cr)
n <- length(cr)
RNGversion("3.5.1")
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- Correlation("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- Correlation("specdata", 2000)
n <- length(cr)
cr <- Correlation("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
install.packages("swirl")
packageVersion("swirl")
library(swirl)
ls
ls()
library(swirl)
install_from_swirl("R Programming")
swirl()
makeCacheMatrix <- function(x = matrix())
{
i = NULL
set = function(y)
{
x <<- y
i <<- NULL
}
get = function() x
setinverse = function(inverse) i <<- inverse
getinverse = function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve = function(x, ...)
{
i = x$getinverse()
if (!is.null(i))
{
message("getting cached data")
return(i)
}
data = x$get()
i = solve(data, ...)
x$setinverse(i)
i
}
load("1.R")
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
cacheSolve(B1)
load("1.R")
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
cacheSolve(m)
load("1.R")
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
m1 = makeCacheMatrix(m)
cacheSolve(m1)
load("1.R")
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
m
m1 = makeCacheMatrix(m)
cacheSolve(m1)
load("1.R")
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
m
m1 = makeCacheMatrix(m)
cacheSolve(m1)
load("1.R")
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
m
m1 = makeCacheMatrix(m)
cacheSolve(m1)
load("1.R")
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
m
m1 = makeCacheMatrix(m)
cacheSolve(m1)
load("1.R")
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
m
m1 = makeCacheMatrix(m)
cacheSolve(m1)
load("1.R")
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
m
m1 = makeCacheMatrix(m)
cacheSolve(m1)
load("1.R")
#2X2 matrxi test
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
m
m1 = makeCacheMatrix(m)
cacheSolve(m1)
#3X3 matrix
anotherMatrix  = matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
anotherMatrix
am1 = makeCacheMatrix(anotherMatrix)
cacheSolve(am1)
anotherMatrix  = matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
anotherMatrix
am1 = makeCacheMatrix(anotherMatrix)
cacheSolve(am1)
anotherMatrix*am1
load("CachingofInvMatrix_Test.R")
load("CachingofInvMatrix.R")
#2X2 matrxi test
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
m
m1 = makeCacheMatrix(m)
cacheSolve(m1)
#3X3 matrix
anotherMatrix  = matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
anotherMatrix
am1 = makeCacheMatrix(anotherMatrix)
cacheSolve(am1)
x <- 1:4
y <- 2
x+y
library(jsonlite)
ls
ls()
josnData = fromJSON("https://api.github.com/users/jtleek/repos")
name(jsonData)
names(jsonData)
names(josnData)
install.packages("httpuv")
library(httpuv)
library(httr)
library(jsonlite)
oauth_endpoints("github")
myapp = oauth_app(appname = "DCApp",
key = "8ef66f98c9eb9b15e40e",
secret = "d0ad67d6846f46f5d6ee10fd9f783e0f71e8843f")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library((datasets))
library(datasets)
library(datasets)
data(cars)
with(cars, plot(speed,dist)
with(cars, plot(speed,dist))
data(cars)
with(cars, plot(speed,dist))
data
P_AuB <- 0.17
P_B <- 0.12
P_AnB <- 0.06
P_A <- P_AuB - P_B + P_AnB
P_A
qunif(0.75)
qt(0.95,15)
qt(0.025, 15)
#Step-1 : Load Data
source("LoadAndPrepareData.R")
#Configure plot
hist(subsetData$Global_active_power, main="Global Active Power",
xlab="Global Active Power (KW/kilowatts)", ylab="Frequency",
col="Blue")
#Save plot to respective file
dev.copy(png,"Plot1.png", width=480, height=480)
#Close the device
dev.off()
#Step-1 : Load Data
source("LoadAndPrepareData.R")
#Configure plot
hist(subsetData$Global_active_power, main="Global Active Power",
xlab="Global Active Power (KW/kilowatts)", ylab="Frequency",
col="Blue")
#Save plot to respective file
dev.copy(png,"Plot1.png", width=480, height=480)
#Close the device
dev.off()
# This file reads, cleans and prepares relevant data for plotting individual plots
#Download and save household_power_consumption.txt file along with R file(in the same folder)
completeData = read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
#Instead of processing the entire data set for plotting, extract the subset of
#the data based on the analysis period
subsetData = subset(completeData, Date %in% c("1/2/2007","2/2/2007"))
subsetData$Date = as.Date(subsetData$Date, format="%d/%m/%Y")
#Combine date and time columns into one field called 'DateTime'
datetime = paste(as.Date(subsetData$Date), subsetData$Time)
subsetData$Datetime = as.POSIXct(datetime)
# This file reads, cleans and prepares relevant data for plotting individual plots
#Download and save household_power_consumption.txt file along with R file(in the same folder)
completeData = read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
#Instead of processing the entire data set for plotting, extract the subset of
#the data based on the analysis period
subsetData = subset(completeData, Date %in% c("1/2/2007","2/2/2007"))
subsetData$Date = as.Date(subsetData$Date, format="%d/%m/%Y")
#Combine date and time columns into one field called 'DateTime'
datetime = paste(as.Date(subsetData$Date), subsetData$Time)
subsetData$Datetime = as.POSIXct(datetime)
completeData = read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
setwd("C:\\MyDesk\\GITHub\\datasciencecoursera\\EDA")
# This file reads, cleans and prepares relevant data for plotting individual plots
#Download and save household_power_consumption.txt file along with R file(in the same folder)
completeData = read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
#Instead of processing the entire data set for plotting, extract the subset of
#the data based on the analysis period
subsetData = subset(completeData, Date %in% c("1/2/2007","2/2/2007"))
subsetData$Date = as.Date(subsetData$Date, format="%d/%m/%Y")
#Combine date and time columns into one field called 'DateTime'
datetime = paste(as.Date(subsetData$Date), subsetData$Time)
subsetData$Datetime = as.POSIXct(datetime)
#Step-1 : Load Data
source("LoadAndPrepareData.R")
#Configure plot
hist(subsetData$Global_active_power, main="Global Active Power",
xlab="Global Active Power (KW/kilowatts)", ylab="Frequency",
col="Blue")
#Save plot to respective file
dev.copy(png,"Plot1.png", width=480, height=480)
#Close the device
dev.off()
#Load Data
source("LoadAndPrepareData.R")
#Configure plot
with(subsetData, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (KW/kilowatts)", xlab="")
})
#Save plot to respective file
dev.copy(png,"Plot2.png", width=480, height=480)
#Close the device
dev.off()
#Load Data
source("LoadAndPrepareData.R")
#Configure plot
with(subsetData, {
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (KW/kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
#Save plot to respective file
dev.copy(png,"Plot3.png", width=480, height=480)
#Close the device
dev.off()
#Load Data
source("LoadAndPrepareData.R")
#Configure plot
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(subsetData, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (KW/Kilowatts)", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (KW/Kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Green')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (KW/Kilowatts)",xlab="")
})
#Save plot to respective file
dev.copy(png,"Plot4.png", width=480, height=480)
#Close the device
dev.off()
